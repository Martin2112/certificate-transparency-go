// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/google/certificate-transparency-go/trillian/ctfe/ctdns (interfaces: DNSLogClient)

// Package mockclient is a generated GoMock package.
package mockclient

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	certificate_transparency_go "github.com/google/certificate-transparency-go"
	reflect "reflect"
)

// MockDNSLogClient is a mock of DNSLogClient interface
type MockDNSLogClient struct {
	ctrl     *gomock.Controller
	recorder *MockDNSLogClientMockRecorder
}

// MockDNSLogClientMockRecorder is the mock recorder for MockDNSLogClient
type MockDNSLogClientMockRecorder struct {
	mock *MockDNSLogClient
}

// NewMockDNSLogClient creates a new mock instance
func NewMockDNSLogClient(ctrl *gomock.Controller) *MockDNSLogClient {
	mock := &MockDNSLogClient{ctrl: ctrl}
	mock.recorder = &MockDNSLogClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDNSLogClient) EXPECT() *MockDNSLogClientMockRecorder {
	return m.recorder
}

// GetEntryAndProof mocks base method
func (m *MockDNSLogClient) GetEntryAndProof(arg0 context.Context, arg1, arg2 uint64) (*certificate_transparency_go.GetEntryAndProofResponse, error) {
	ret := m.ctrl.Call(m, "GetEntryAndProof", arg0, arg1, arg2)
	ret0, _ := ret[0].(*certificate_transparency_go.GetEntryAndProofResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntryAndProof indicates an expected call of GetEntryAndProof
func (mr *MockDNSLogClientMockRecorder) GetEntryAndProof(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntryAndProof", reflect.TypeOf((*MockDNSLogClient)(nil).GetEntryAndProof), arg0, arg1, arg2)
}

// GetProofByHash mocks base method
func (m *MockDNSLogClient) GetProofByHash(arg0 context.Context, arg1 []byte, arg2 uint64) (*certificate_transparency_go.GetProofByHashResponse, error) {
	ret := m.ctrl.Call(m, "GetProofByHash", arg0, arg1, arg2)
	ret0, _ := ret[0].(*certificate_transparency_go.GetProofByHashResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProofByHash indicates an expected call of GetProofByHash
func (mr *MockDNSLogClientMockRecorder) GetProofByHash(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProofByHash", reflect.TypeOf((*MockDNSLogClient)(nil).GetProofByHash), arg0, arg1, arg2)
}

// GetSTH mocks base method
func (m *MockDNSLogClient) GetSTH(arg0 context.Context) (*certificate_transparency_go.SignedTreeHead, error) {
	ret := m.ctrl.Call(m, "GetSTH", arg0)
	ret0, _ := ret[0].(*certificate_transparency_go.SignedTreeHead)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSTH indicates an expected call of GetSTH
func (mr *MockDNSLogClientMockRecorder) GetSTH(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSTH", reflect.TypeOf((*MockDNSLogClient)(nil).GetSTH), arg0)
}

// GetSTHConsistency mocks base method
func (m *MockDNSLogClient) GetSTHConsistency(arg0 context.Context, arg1, arg2 uint64) ([][]byte, error) {
	ret := m.ctrl.Call(m, "GetSTHConsistency", arg0, arg1, arg2)
	ret0, _ := ret[0].([][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSTHConsistency indicates an expected call of GetSTHConsistency
func (mr *MockDNSLogClientMockRecorder) GetSTHConsistency(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSTHConsistency", reflect.TypeOf((*MockDNSLogClient)(nil).GetSTHConsistency), arg0, arg1, arg2)
}
